#!/usr/bin/env python3

import sys
import os
import shutil as su
import subprocess as subp
import threading as t
import signal as sig
import time
import argparse as ap
import re


class MissingExecutableError(Exception):
    def __init__(self, message):
        super().__init__(message)


PROGRESS_UNIT = 0
PROGRESS_LEN = 30
PROGRESS = 0
LAST_PROGRESS_TASK = None
LOCK = t.Lock()


def parse_help_flag(argv_str):
    pat = r"(\s-h)($|\s)"
    match = re.search(pat, argv_str)
    return match is not None

def parse_executable(exec_str):
    splitted_exec = exec_str.split(" ")
    exec_path = splitted_exec[0]
    exec_path = adjust_exec_path(exec_path)
    executable = [exec_path] + splitted_exec[1:]
    executable = " ".join(executable)

    if not os.path.exists(exec_path):
        raise IOError("Executable {0} does not exist. Check the executable path and try again".format(exec_path))

    return executable


def parse_args(args):
    
    class HelpFormatter(ap.ArgumentDefaultsHelpFormatter, ap.RawDescriptionHelpFormatter):
        def _format_usage(self, usage, actions, groups, prefix):
            ret_usage = super()._format_usage(usage, actions, groups, prefix).split("\n\n")[0]
            ret_usage += " -- /path/to/executable <executable args>\n\n"
            return ret_usage


    def parse_exec_time(s):
        pat = r"([1-9][0-9]*)([smh])?$"
        m = re.search(pat, s)
        if m is None:
            raise ap.ArgumentTypeError(
                "Malformed execution time string. Accepted format: "
                "<Integer> [s|m|h]. If neither of the unit modifier is used, time will be measured in seconds."
            )

        val = int(m[1])
        modifier = m[2]

        if modifier is not None:
            if modifier == 'm':
                val *= 60
            elif modifier == 'h':
                val *= 3600

        return val



    parser = ap.ArgumentParser(formatter_class = HelpFormatter)

    parser.add_argument("--fuzz-out", "-f", 
        default = "out", 
        help = "Name of the folder containing the results generated by the fuzzer",
        dest = "fuzz_out"
    )

    parser.add_argument("--out", "-o",
        default = "tracer_out",
        help = "Name of the folder containing the results generated by the tracer",
        dest = "tracer_out"
    )

    parser.add_argument("--fuzz-dir", "-d",
        default = "afl_test",
        help =  "Name of the folder containing all the requirements to run the fuzzer. This folder must already exist and "
                "contain all the files/directories required by the fuzzer.",
        dest = "fuzz_dir"
    )

    parser.add_argument("--fuzz-in", "-i",
        default = "in",
        help =  "Name of the folder containing the initial testcases for the fuzzer. This folder must already exist "
                "and contain the testcases",
        dest = "fuzz_in"
    )

    parser.add_argument("--backup", "-b",
        default = "olds",
        help = "Name of the folder used to move old results of past executions before running the tracer again.",
        dest = "olds_dir"
    )

    parser.add_argument("--admin-priv", "-a",
        action = "store_true",
        help =  "Flag used to specify the user has administration privileges (e.g. can use sudo on Linux). This can be used "
                "by the launcher in order to execute a configuration script that, according to the fuzzer's manual, should "
                "speedup the fuzzing task.",
        dest = "admin_priv"
    )

    parser.add_argument("--time", "-t",
        default = "60",
        help =  "Specify fuzzer's execution time. By default, the value is measured in seconds. The following modifiers can "
                "be used: 's', 'm', 'h', to specify time respectively in seconds, minutes or hours",
        dest = "exec_time",
        type = parse_exec_time
    )

    parser.add_argument("--slaves", "-s",
        default = 0,
        help =  "Specify the number of slave fuzzer instances to run. The fuzzer always launches at least the main instance. " 
                "Launching more instances uses more resources, but allows to find more inputs in a smaller time span."
                "It is advisable to use this option combined with -p, if possible. Note that the total amount of launched processes won't be "
                "higher than the total number of available cpus, unless --ignore-cpu-count flag is enabled.",
        dest = "slaves",
        type = int
    )

    parser.add_argument("--processes", "-p",
        default = 1,
        help =  "Specify the number of processes executing the tracer. Using more processes allows to launch the tracer with more inputs in the same time span. "
                "It is useless to use many processes for the tracer if the fuzzer finds new inputs very slowly."
                "If there are few resources available, it is therefore advisable to dedicate them to fuzzer instances rather then to tracer processes."
                "Note that the total amount of launched processes won't be higher than the total number of available cpus, unless --ignore-cpu-count "
                "flag is enabled.",
        dest = "processes",
        type = int
    )

    parser.add_argument("--ignore-cpu-count",
        action = "store_true",
        help =  "Flag used to ignore the number of available cpus and force the number of processes specified with -s and -p to be launched even if"
                "they are more than that.",
        dest = "ignore_cpu_count"
    )

    parser.epilog = "After the arguments for the script, the user must pass '--' followed by the executable path and the arguments that should be passed to it, "\
                    "except the file it reads from, if any.\n"\
                    "Example: ./memTracer.py -- /path/to/the/executable arg1 arg2 --opt1\n"\
                    "Remember to NOT PASS the input file as an argument for the executable, as it will be automatically passed by the fuzzer starting "\
                    "from the initial testcases and followed by the generated inputs"

    return parser.parse_args(args)


def launchTracer(exec_cmd, args, fuzz_int_event: t.Event):
    fuzz_dir = args.fuzz_dir
    fuzz_out = os.path.join(fuzz_dir, args.fuzz_out)
    tracer_out = os.path.join(fuzz_dir, args.tracer_out)
    inputs_dir = os.path.join(fuzz_out, "Main", "queue")
    launcher_path = os.path.join(os.getcwd(), "launcher")
    tracer_cmd = [launcher_path] + [exec_cmd]
    traced_inputs = {".state"}
    os.mkdir(tracer_out)
    new_inputs_found = True

    while not os.path.exists(inputs_dir):
        time.sleep(1)

    # Loop interrupts if and only if there are no new_inputs and the fuzzer has been interrupted
    while new_inputs_found or not fuzz_int_event.is_set():
        inputs = set()
        for f in os.scandir(inputs_dir):
            inputs.add(f.name)

        new_inputs = inputs.difference(traced_inputs)
        if(len(new_inputs) == 0):
            new_inputs_found = False
            print("Waiting the fuzzer for new inputs")
            time.sleep(10)
            continue

        new_inputs_found = True

        for f in new_inputs:
            print("{0} is running".format(f))
            input_folder = os.path.join(tracer_out, f)
            os.mkdir(input_folder)
            input_cpy_path = os.path.join(input_folder, "input")
            su.copy(os.path.join(inputs_dir, f), input_cpy_path)
            print()
            full_cmd = tracer_cmd + [input_cpy_path]
            p = subp.Popen(full_cmd)
            p.wait()
            su.move(os.path.join(os.getcwd(), "overlaps.bin"), os.path.join(input_folder, "overlaps.bin"))
            print()

        traced_inputs.update(new_inputs)
        time.sleep(10)


def move_directory(src, dst_dir, new_name = None):
    if not os.path.exists(dst_dir):
        os.makedirs(dst_dir)

    if not new_name is None:
        dirname = os.path.dirname(src)
        new_path = os.path.join(dirname, new_name)
        os.rename(src, new_path)
        src = new_path

    basename = os.path.basename(src)
    su.move(src, os.path.join(dst_dir, basename))


def count_dir_content(dir_path):
    if not os.path.exists(dir_path):
        os.makedirs(dir_path)
        return 0

    return len(os.listdir(dir_path))


def adjust_exec_path(path):
    if(os.path.isabs(path)):
        return path

    return os.path.realpath(path)


def main():
    global PROGRESS
    global PROGRESS_UNIT

    def send_int(process: subp.Popen):
        process.send_signal(sig.SIGINT)


    def print_empty_progress(fuzz_int_ev: t.Event):
        global PROGRESS_LEN
        global LAST_PROGRESS_TASK
        global LOCK

        out = ["|"]
        out.append(" " * PROGRESS_LEN)
        out.append("|")
        print("".join(out))

        LOCK.acquire()
        LAST_PROGRESS_TASK = t.Timer(10, print_progress, [fuzz_int_ev])
        LAST_PROGRESS_TASK.start()
        LOCK.release()


    # |fuzz_int_event| is required because 2 different threads may be running |print_progress|,
    # one with the |finished| flag enabled, and one with the flag disabled.
    # If in that situation the flag-enabled thread acquires the lock first, the flag-disabled
    # thread will acquire it later, setting a new timer, thus never ending setting new timers
    def print_progress(fuzz_int_ev: t.Event, finished = False):
        global PROGRESS
        global PROGRESS_LEN
        global LAST_PROGRESS_TASK
        global LOCK

        if finished:
            progress_bar = PROGRESS_LEN
        else:
            PROGRESS += 10
            progress_bar = PROGRESS // PROGRESS_UNIT
        out = ["|"]
        out.append("=" * progress_bar)
        out.append(" " * (PROGRESS_LEN - progress_bar))
        out.append("|")
        print("".join(out))

        LOCK.acquire()
        if not finished and not fuzz_int_ev.is_set:
            LAST_PROGRESS_TASK = t.Timer(10, print_progress, [fuzz_int_ev])
            LAST_PROGRESS_TASK.start()
        elif not LAST_PROGRESS_TASK is None:
            LAST_PROGRESS_TASK.cancel()
        LOCK.release()


    # sys_args contains the command-line arguments divided in 2 parts:
    # the first element contains a string representing the arguments for this script;
    # the second element contains a string representing the executable and its command-line arguments
    argv_str = " ".join(sys.argv)

    # Check if -h is passed as an argument
    help_requested = parse_help_flag(argv_str)
    if help_requested:
        # Since -h is passed as an argument, parse_args will simply print the help text and return
        parse_args(sys.argv)

    pat = r"(\s)(--)([\s\n]|$)"
    match = re.search(pat, argv_str)

    # If there's no '--' in the list of command line arguments, the script can't say which is the executable
    if match is None:
        raise MissingExecutableError(
            "Executable path is missing. Provide an executable path and its arguments after '--'.\n"
            "Example: ./memTracer.py -- /path/to/executable arg1 arg2 -opt1"
        )

    sys_args = argv_str.split(match[0])

    # If no executable is provided, raise an error
    if len(sys_args[1]) == 0:
        raise MissingExecutableError(
            "Executable path is missing. Provide an executable path and its arguments after '--'.\n"
            "Example: ./memTracer.py -- /path/to/executable arg1 arg2 -opt1"
        )

    # args is a Namespace object, containing the arguments parsed by parse_args
    args = parse_args(sys_args[0].split(" ")[1:])

    # executable is a string specifying the executable path followed by the arguments to be passed to it
    executable = parse_executable(sys_args[1])

    WORKING_DIR = os.getcwd()
    FUZZ_DIR = os.path.join(WORKING_DIR, args.fuzz_dir)
    FUZZ_OUT = os.path.join(FUZZ_DIR, args.fuzz_out)
    FUZZ_IN = os.path.join(FUZZ_DIR, args.fuzz_in)
    FUZZ_OLDS = os.path.join(FUZZ_DIR, args.olds_dir)

    if not os.path.exists(FUZZ_DIR):
        raise IOError("Folder {0} must exist and must contain all the required files/folders for the fuzzer to work (e.g. initial testcases)".format(FUZZ_DIR))

    if not os.path.exists(FUZZ_IN):
        raise IOError("Folder {0} must exist and contain at least 1 initial testcase".format(FUZZ_IN))

    # If out (and therefore tracer_out) exists in the fuzzer folder, we need to move them away.
    # First, we need to update last_count value
    if os.path.exists(FUZZ_OUT):
        last_old = os.path.join(FUZZ_DIR, "last_old")
        last_count = None

        # If file last_old does not exist, create it. last_count value will be 0
        if not os.path.exists(last_old):
                last_count = 0
                with open(last_old, "w") as f:
                    f.write(str(last_count))
        # otherwise, read the value stored in the file last_old. If it is a number, set last_count to that 
        # value, otherwise, the file is malformed, so we need to actually count the folders already stored in
        # FUZZ_OLDS
        else:
            with open(last_old, "r+") as f:
                content = f.readline()
                if len(content) == 0:
                    last_count = 0
                else:
                    try:
                        last_count = int(content)
                        last_count += 1
                    except ValueError:
                        last_count = count_dir_content(FUZZ_OLDS)

                f.seek(0)
                f.write(str(last_count))
                f.truncate()

        backup_dir = os.path.join(FUZZ_OLDS, str(last_count))
        tracer_out = os.path.join(FUZZ_DIR, args.tracer_out)
        move_directory(FUZZ_OUT, backup_dir)
        move_directory(tracer_out, backup_dir)

        if os.path.exists(tracer_out):
            raise IOError("Directory {0} already exists. Please move or remove it before running the tracer.".format(tracer_out))
        
        if os.path.exists(FUZZ_OUT):
            raise IOError("Directory {0} already exists. Please move or remove it before running the tracer.".format(FUZZ_OUT))


    # Start AFL fuzzer
    if(args.admin_priv):
        p = subp.Popen(["sudo", "afl-system-config"])
        p.wait()
    fuzz_cmd = ["afl-fuzz", "-Q", "-M", "Main", "-i", FUZZ_IN, "-o", FUZZ_OUT, "--", executable, "@@"]
    stop_after_seconds = args.exec_time
    PROGRESS_UNIT = stop_after_seconds // PROGRESS_LEN
    if PROGRESS_UNIT <= 0:
        PROGRESS_UNIT = PROGRESS_LEN
    p = subp.Popen(fuzz_cmd, stdout = subp.PIPE, stderr = subp.PIPE)
    print()
    print("Fuzzer will be interrupted in {0} seconds...".format(stop_after_seconds))

    fuzzer_interrupted_event = t.Event()
    int_timer = t.Timer(stop_after_seconds, send_int, [p])
    int_timer.start()
    print_empty_progress(fuzzer_interrupted_event)

    tracerThread = t.Thread(target = launchTracer, args = [executable, args, fuzzer_interrupted_event])
    tracerThread.start()

    # Wait for the fuzzer to be interrupted
    p.wait()
    fuzzer_interrupted_event.set()
    print_progress(fuzzer_interrupted_event, True)
    # If the fuzzer terminates before the requested time (e.g. if there are no initial testcases)
    # it is not necessary to wait the whole time to send a SIGINT
    int_timer.cancel()
    print("Fuzzer interrupted")
    print()

    # Wait for the tracer thread to run with all the inputs found by the fuzzer
    tracerThread.join()
    print("All finished")


if __name__ == "__main__":
    main()