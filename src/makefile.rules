##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS :=

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Handle exceptions here (OS/arch related) ######

RUNNABLE_TESTS := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)

###### Handle exceptions here (bugs related) ######

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

TOOL_CXXFLAGS += -std=c++11 -MMD $(ALLOCATOR_DEF)
TOOL_CFLAGS += -MMD $(ALLOCATOR_DEF)
PARENTDIR := ${CURDIR}/../
OBJDIR := $(PARENTDIR)tool/
BINDIR := $(PARENTDIR)bin/
DEBUGDIR := $(PARENTDIR)debug/
MKDIR := mkdir -p 
PINROOTDEF := -DPIN_ROOT=\"$(PARENTDIR)third_party/PIN/pin\"
TOOLDIRDEF := -DTOOL_DIR=

# Memory instruction emulators
MEM_INST_SRC_DIR := ${CURDIR}/instructions/mem/
MEM_INST_EMULATORS := $(wildcard $(MEM_INST_SRC_DIR)*.cpp)
MEM_INST_OBJ_DIR := $(OBJDIR)instructions/mem/
MEM_INST_OBJ_FILES := $(patsubst $(MEM_INST_SRC_DIR)%.cpp, $(MEM_INST_OBJ_DIR)%.o, $(MEM_INST_EMULATORS))

# Register instruction emulators
REG_INST_SRC_DIR := ${CURDIR}/instructions/reg/
REG_INST_EMULATORS := $(wildcard $(REG_INST_SRC_DIR)*.cpp)
REG_INST_OBJ_DIR := $(OBJDIR)instructions/reg/
REG_INST_OBJ_FILES := $(patsubst $(REG_INST_SRC_DIR)%.cpp, $(REG_INST_OBJ_DIR)%.o, $(REG_INST_EMULATORS))

# Misc folder source files
MISC_SRC_DIR := ${CURDIR}/misc/
MISC_SRC := $(wildcard $(MISC_SRC_DIR)*.cpp)
MISC_OBJ_DIR := $(OBJDIR)misc/
MISC_OBJ_FILES := $(patsubst $(MISC_SRC_DIR)%.cpp, $(MISC_OBJ_DIR)%.o, $(MISC_SRC))

# Debug enabled memory instruction emulators
MEM_INST_DBG_DIR := $(DEBUGDIR)instructions/mem/
MEM_INST_DBG_FILES := $(patsubst $(MEM_INST_SRC_DIR)%.cpp, $(MEM_INST_DBG_DIR)%.o, $(MEM_INST_EMULATORS))

# Debug enabled register instruction emulators
REG_INST_DBG_DIR := $(DEBUGDIR)instructions/reg/
REG_INST_DBG_FILES := $(patsubst $(REG_INST_SRC_DIR)%.cpp, $(REG_INST_DBG_DIR)%.o, $(REG_INST_EMULATORS))

# Debug enabled misc folder source files
MISC_DBG_DIR := $(DEBUGDIR)misc/
MISC_DBG_FILES := $(patsubst $(MISC_SRC_DIR)%.cpp, $(MISC_DBG_DIR)%.o, $(MISC_SRC))

.PHONY: all
all: tool | $(OBJDIR)

.PHONY: tool
tool: $(OBJDIR)MemTrace$(PINTOOL_SUFFIX) launcher

.PHONY: debug
debug: $(DEBUGDIR)MemTrace$(PINTOOL_SUFFIX) debugLauncher

.PHONY: nulltool
nulltool: $(OBJDIR)NullTool$(PINTOOL_SUFFIX)

.PHONY: launcher
launcher: $(BINDIR)launcher

.PHONY: debugLauncher
debugLauncher: $(BINDIR)launchDebug

.PHONY: instHeaderFiles
instHeaderFiles: | $(MEM_INST_OBJ_DIR) $(REG_INST_OBJ_DIR)
	python3 ${CURDIR}/instructionsScript.py

.PHONY: instDebugHeaderFiles
instDebugHeaderFiles: | $(MEM_INST_DBG_DIR) $(REG_INST_DBG_DIR)
	python3 ${CURDIR}/instructionsScript.py -d

$(MEM_INST_OBJ_DIR):
	$(MKDIR)$@

$(REG_INST_OBJ_DIR):
	$(MKDIR)$@

$(MISC_OBJ_DIR):
	$(MKDIR)$@

$(MEM_INST_DBG_DIR):
	$(MKDIR)$@

$(REG_INST_DBG_DIR):
	$(MKDIR)$@

$(MISC_DBG_DIR):
	$(MKDIR)$@

$(OBJDIR):
	$(MKDIR)$@

$(DEBUGDIR):
	$(MKDIR)$@

# Build the intermediate object file.
$(OBJDIR)MemTrace$(OBJ_SUFFIX): MemTrace.cpp | $(OBJDIR) $(OBJDIR)InstructionHandler$(OBJ_SUFFIX)
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)NullTool$(OBJ_SUFFIX): NullTool.cpp | $(OBJDIR)
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)MemoryAccess$(OBJ_SUFFIX): MemoryAccess.cpp MemoryAccess.h | $(OBJDIR)
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)AccessIndex$(OBJ_SUFFIX): AccessIndex.cpp AccessIndex.h | $(OBJDIR)
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)ShadowMemory$(OBJ_SUFFIX): ShadowMemory.cpp ShadowMemory.h | $(OBJDIR)
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)HeapType$(OBJ_SUFFIX): HeapType.cpp HeapType.h | $(OBJDIR)
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)ShadowRegisterFile$(OBJ_SUFFIX): ShadowRegisterFile.cpp ShadowRegisterFile.h | $(OBJDIR)
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)ShadowRegister$(OBJ_SUFFIX): ShadowRegister.cpp ShadowRegister.h | $(OBJDIR)
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(OBJDIR)InstructionHandler$(OBJ_SUFFIX): InstructionHandler.cpp InstructionHandler.h | instHeaderFiles
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file
$(OBJDIR)MemInstructionEmulator$(OBJ_SUFFIX): MemInstructionEmulator.cpp MemInstructionEmulator.h
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the intermediate object file
$(OBJDIR)TagManager$(OBJ_SUFFIX): TagManager.cpp TagManager.h
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build intermediate object files for memory instruction emulators
$(MEM_INST_OBJ_DIR)%.o: $(MEM_INST_SRC_DIR)%.cpp $(MEM_INST_SRC_DIR)%.h
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build intermediate object files for register instruction emulators
$(REG_INST_OBJ_DIR)%.o: $(REG_INST_SRC_DIR)%.cpp $(REG_INST_SRC_DIR)%.h
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build intermediate object files for misc source files
$(MISC_OBJ_DIR)%.o: $(MISC_SRC_DIR)%.cpp $(MISC_SRC_DIR)%.h | $(MISC_OBJ_DIR)
	$(CC) $(TOOL_CFLAGS) $(COMP_OBJ)$@ $<

# Build the tool as a dll (shared object).
$(OBJDIR)MemTrace$(PINTOOL_SUFFIX): $(OBJDIR)MemTrace$(OBJ_SUFFIX) \
$(OBJDIR)MemoryAccess$(OBJ_SUFFIX) MemoryAccess.h \
$(OBJDIR)AccessIndex$(OBJ_SUFFIX) AccessIndex.h \
$(OBJDIR)ShadowMemory$(OBJ_SUFFIX) ShadowMemory.h \
$(OBJDIR)HeapType$(OBJ_SUFFIX) HeapType.h \
$(OBJDIR)ShadowRegisterFile$(OBJ_SUFFIX) ShadowRegisterFile.h \
$(OBJDIR)ShadowRegister$(OBJ_SUFFIX) ShadowRegister.h \
$(OBJDIR)InstructionHandler$(OBJ_SUFFIX) InstructionHandler.h \
$(OBJDIR)MemInstructionEmulator$(OBJ_SUFFIX) MemInstructionEmulator.h \
$(OBJDIR)TagManager$(OBJ_SUFFIX) TagManager.h \
$(MEM_INST_OBJ_FILES) \
$(REG_INST_OBJ_FILES) \
$(MISC_OBJ_FILES)
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $(^:%.h=) $(TOOL_LPATHS) $(TOOL_LIBS)

$(OBJDIR)NullTool$(PINTOOL_SUFFIX): $(OBJDIR)NullTool$(OBJ_SUFFIX)	
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $(^:%.h=) $(TOOL_LPATHS) $(TOOL_LIBS)

$(BINDIR)launcher: toolLauncher.cpp
	$(CXX) $(PINROOTDEF) $(TOOLDIRDEF)\"$(OBJDIR)\" -g -o $@ $^


# DEBUG ENABLED EXECUTABLES
# Build the intermediate object file.
$(DEBUGDIR)MemTrace$(OBJ_SUFFIX): MemTrace.cpp | $(DEBUGDIR) $(DEBUGDIR)InstructionHandler$(OBJ_SUFFIX)
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(DEBUGDIR)MemoryAccess$(OBJ_SUFFIX): MemoryAccess.cpp MemoryAccess.h | $(DEBUGDIR)
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(DEBUGDIR)AccessIndex$(OBJ_SUFFIX): AccessIndex.cpp AccessIndex.h | $(DEBUGDIR)
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(DEBUGDIR)ShadowMemory$(OBJ_SUFFIX): ShadowMemory.cpp ShadowMemory.h | $(DEBUGDIR)
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(DEBUGDIR)HeapType$(OBJ_SUFFIX): HeapType.cpp HeapType.h | $(DEBUGDIR)
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(DEBUGDIR)ShadowRegisterFile$(OBJ_SUFFIX): ShadowRegisterFile.cpp ShadowRegisterFile.h | $(OBJDIR)
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(DEBUGDIR)ShadowRegister$(OBJ_SUFFIX): ShadowRegister.cpp ShadowRegister.h | $(OBJDIR)
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build the intermediate object file.
$(DEBUGDIR)InstructionHandler$(OBJ_SUFFIX): InstructionHandler.cpp InstructionHandler.h | instDebugHeaderFiles
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build the intermediate object file
$(DEBUGDIR)MemInstructionEmulator$(OBJ_SUFFIX): MemInstructionEmulator.cpp MemInstructionEmulator.h
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build the intermediate object file
$(DEBUGDIR)TagManager$(OBJ_SUFFIX): TagManager.cpp TagManager.h
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build intermediate object files for memory instruction emulators
$(MEM_INST_DBG_DIR)%.o: $(MEM_INST_SRC_DIR)%.cpp $(MEM_INST_SRC_DIR)%.h
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build intermediate object files for register instruction emulators
$(REG_INST_DBG_DIR)%.o: $(REG_INST_SRC_DIR)%.cpp $(REG_INST_SRC_DIR)%.h
	$(CXX) $(TOOL_CXXFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build intermediate object files for misc source files
$(MISC_DBG_DIR)%.o: $(MISC_SRC_DIR)%.cpp $(MISC_SRC_DIR)%.h | $(MISC_DBG_DIR)
	$(CC) $(TOOL_CFLAGS) -DDEBUG -g $(COMP_OBJ)$@ $<

# Build the tool as a dll (shared object).
$(DEBUGDIR)MemTrace$(PINTOOL_SUFFIX): $(DEBUGDIR)MemTrace$(OBJ_SUFFIX) \
$(DEBUGDIR)MemoryAccess$(OBJ_SUFFIX) MemoryAccess.h \
$(DEBUGDIR)AccessIndex$(OBJ_SUFFIX) AccessIndex.h \
$(DEBUGDIR)ShadowMemory$(OBJ_SUFFIX) ShadowMemory.h \
$(DEBUGDIR)HeapType$(OBJ_SUFFIX) HeapType.h \
$(DEBUGDIR)ShadowRegisterFile$(OBJ_SUFFIX) ShadowRegisterFile.h \
$(DEBUGDIR)ShadowRegister$(OBJ_SUFFIX) ShadowRegister.h \
$(DEBUGDIR)InstructionHandler$(OBJ_SUFFIX) InstructionHandler.h \
$(DEBUGDIR)MemInstructionEmulator$(OBJ_SUFFIX) MemInstructionEmulator.h \
$(DEBUGDIR)TagManager$(OBJ_SUFFIX) TagManager.h \
$(MEM_INST_DBG_FILES) \
$(REG_INST_DBG_FILES) \
$(MISC_DBG_FILES)
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $(^:%.h=) $(TOOL_LPATHS) $(TOOL_LIBS)

$(BINDIR)launchDebug: toolLauncher.cpp
	$(CXX) $(PINROOTDEF) $(TOOLDIRDEF)\"$(DEBUGDIR)\" -g -o $@ $^

# Syscall handling code is provided as simple header files. In order to enable re-compilation
# on header files modifications, include the dependencies files in the makefile.
-include $(DEBUGDIR)*.d
-include $(OBJDIR)*.d